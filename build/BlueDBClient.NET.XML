<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BlueDBClient.NET</name>
    </assembly>
    <members>
        <member name="M:BlueDBClient.NET.Configuration.BlueDBClientProperties.Init``1">
            <summary>
            Initializes BlueDBClient. The entity namespace and assembly is extracted from the specified example entity type.
            </summary>
            <typeparam name="T">One of the entity types from which to extract the entity namespace and assembly from.</typeparam>
        </member>
        <member name="M:BlueDBClient.NET.Configuration.BlueDBClientProperties.Init(System.Type)">
            <summary>
            Initializes BlueDBClient. The entity namespace and assembly is extracted from the specified example entity type.
            </summary>
            <param name="entityExampleType">One of the entity types from which to extract the entity namespace and assembly from.</param>
        </member>
        <member name="F:BlueDBClient.NET.Configuration.BlueDBClientProperties.EntityNamespace">
            <summary>
            The namespace of the entities.
            </summary>
        </member>
        <member name="F:BlueDBClient.NET.Configuration.BlueDBClientProperties.EntityAssemblyName">
            <summary>
            The name of the assembly in which the entities are located.
            </summary>
        </member>
        <member name="T:BlueDBClient.NET.Entity.BlueDBEntity">
            <summary>
            Base class for BlueDB entities.
            </summary>
        </member>
        <member name="P:BlueDBClient.NET.Entity.BlueDBEntity.IsPersistent">
            <summary>
            Determines whether this entity is present in the database or not. Basically, it returns true if ID>0.
            </summary>
        </member>
        <member name="M:BlueDBClient.NET.Entity.BlueDBEntity.Equals(System.Object)">
            <summary>
            Determines whether the provided entity is equal to the current entity. True when they are the same type and have the same ID.
            </summary>
            <param name="entity">The entity to compare with the current entity.</param>
        </member>
        <member name="M:BlueDBClient.NET.Entity.BlueDBEntity.GetHashCode">
            <summary>
            Gets the ID of the entity.
            </summary>
        </member>
        <member name="M:BlueDBClient.NET.Entity.BlueDBEntity.ToString">
            <summary>
            Returns a string that represents the current entity.
            </summary>
        </member>
        <member name="M:BlueDBClient.NET.Entity.BlueDBEntity.op_Equality(BlueDBClient.NET.Entity.BlueDBEntity,BlueDBClient.NET.Entity.BlueDBEntity)">
            <summary>
            Determines whether both entities are considered equal. True when they are the same type and have the same ID.
            </summary>
        </member>
        <member name="M:BlueDBClient.NET.Entity.BlueDBEntity.op_Inequality(BlueDBClient.NET.Entity.BlueDBEntity,BlueDBClient.NET.Entity.BlueDBEntity)">
            <summary>
            Determines whether both entities are not considered equal. True when they are not the same type or have a different ID.
            </summary>
        </member>
        <member name="M:BlueDBClient.NET.Entity.BlueDBEntity.GetAllFields``1(System.Boolean)">
            <summary>
            Gets a list of all fields of the specified type.
            </summary>
            <typeparam name="T">The type of which to get the fields.</typeparam>
            <param name="includeInherited">Determines whether to include fields of parent classes of the specified type.</param>
        </member>
        <member name="M:BlueDBClient.NET.Entity.BlueDBEntity.GetAllFields(System.Type,System.Boolean)">
            <summary>
            Gets a list of all fields of the specified type.
            </summary>
            <param name="type">The type of which to get the fields.</param>
            <param name="includeInherited">Determines whether to include fields of parent classes of the specified type.</param>
        </member>
        <member name="T:BlueDBClient.NET.Entity.EntityList`1">
            <summary>
            A list of entities. Use it to package a collection of entities to serialize them in a correct JSON format.
            </summary>
            <typeparam name="T">The type of the entities in the list.</typeparam>
        </member>
        <member name="M:BlueDBClient.NET.Entity.EntityList`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BlueDBClient.NET.Entity.EntityList`1"/> class that is empty and has the default initial capacity.
            </summary>
        </member>
        <member name="M:BlueDBClient.NET.Entity.EntityList`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:BlueDBClient.NET.Entity.EntityList`1"/> class that is empty and has the specified initial capacity.
            </summary>
            <param name="capacity">The number of entities that the new list can initially store.</param>
        </member>
        <member name="M:BlueDBClient.NET.Entity.EntityList`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:BlueDBClient.NET.Entity.EntityList`1"/> class that contains entities copied from the specified collection and has sufficient capacity to accommodate the number of entities copied.
            </summary>
            <param name="collection">The collection whose entities are copied to the new entity list.</param>
        </member>
        <member name="T:BlueDBClient.NET.Entity.Fields.Field">
            <summary>
            Represents a field of a database entity. Use Register method to register a field inside an entity.
            </summary>
        </member>
        <member name="P:BlueDBClient.NET.Entity.Fields.Field.Name">
            <summary>
            Gets the name of the field.
            </summary>
        </member>
        <member name="P:BlueDBClient.NET.Entity.Fields.Field.Type">
            <summary>
            Gets the type of the field.
            </summary>
        </member>
        <member name="P:BlueDBClient.NET.Entity.Fields.Field.TypeOfEntity">
            <summary>
            Gets the type of the entity field, if it represents an entity. If it is a list of entities, returns the type of entity.
            </summary>
        </member>
        <member name="P:BlueDBClient.NET.Entity.Fields.Field.EntityType">
            <summary>
            Gets the type of the entity.
            </summary>
        </member>
        <member name="P:BlueDBClient.NET.Entity.Fields.Field.DataType">
            <summary>
            Gets the field data type (property, entity, list).
            </summary>
        </member>
        <member name="P:BlueDBClient.NET.Entity.Fields.Field.IsEntity">
            <summary>
            Returns true if this field represents an entity or a list of entities.
            </summary>
        </member>
        <member name="M:BlueDBClient.NET.Entity.Fields.Field.Register(System.String,System.Type)">
            <summary>
            Registers a new field to the specified entity type.
            </summary>
            <param name="name">The name of the field.</param>
            <param name="entityType">The type of the entity.</param>
        </member>
        <member name="T:BlueDBClient.NET.Entity.ObservableBlueDBEntity">
            <summary>
            A base class for entities that must implement INotifyPropertyChanged interface.
            <para>
            Use RaisePropertyChanged and Set methods.
            </para>
            </summary>
        </member>
        <member name="M:BlueDBClient.NET.Entity.ObservableBlueDBEntity.RaisePropertyChanged(System.String)">
            <summary>
            Raises the PropertyChanged event. You do not need to call this manually if you use the Set method.
            </summary>
            <param name="propertyName">The name of the property that changed.</param>
        </member>
        <member name="M:BlueDBClient.NET.Entity.ObservableBlueDBEntity.RaisePropertyChanging(System.String)">
            <summary>
            Raises the PropertyChanging event. You do not need to call this manually if you use the Set method.
            </summary>
            <param name="propertyName">The name of the property that is about to be changed.</param>
        </member>
        <member name="M:BlueDBClient.NET.Entity.ObservableBlueDBEntity.Set``1(System.String,``0@,``0)">
            <summary>
            Compares the current and new value of the specified field. If it differs, then it raises PropertyChanging event, assigns the new value and raises the PropertyChanged event.
            </summary>
            <typeparam name="T">The type of the property that is being set.</typeparam>
            <param name="propertyName">The name of the property that is being set.</param>
            <param name="field">The field that is being set.</param>
            <param name="newValue">The new field value that is about to be set.</param>
        </member>
        <member name="M:BlueDBClient.NET.IO.EntityJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
        </member>
        <member name="M:BlueDBClient.NET.IO.EntityJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The JsonReader to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:BlueDBClient.NET.IO.EntityJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the object.
            </summary>
            <param name="writer">The JsonWriter to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:BlueDBClient.NET.IO.EntityJsonConverter.ReadType(Newtonsoft.Json.Linq.JObject,System.Int32,System.Type@,System.Collections.Generic.Dictionary{System.Int32,BlueDBClient.NET.Entity.BlueDBEntity})">
            <summary>
            If it doesn't return null, that means that an entity of the same type with the same key was already decoded and was found in the session and returned.
            </summary>
        </member>
        <member name="M:BlueDBClient.NET.IO.EntityListJsonConverter.CanConvert(System.Type)">
            <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
            <param name="objectType">Type of the object.</param>
        </member>
        <member name="M:BlueDBClient.NET.IO.EntityListJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON representation of the object.
            </summary>
            <param name="reader">The JsonReader to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:BlueDBClient.NET.IO.EntityListJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the list.
            </summary>
            <param name="writer">The JsonWriter to write to.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:BlueDBClient.NET.IO.JSON">
            <summary>
            Includes utility functions for encoding/decoding entities to/from Json.
            </summary>
        </member>
        <member name="M:BlueDBClient.NET.IO.JSON.Encode``1(System.Collections.Generic.List{``0})">
            <summary>
            Encodes a list of entities to a JSON string.
            </summary>
            <param name="entities">The entities to be encoded.</param>
        </member>
        <member name="M:BlueDBClient.NET.IO.JSON.Encode(BlueDBClient.NET.Entity.BlueDBEntity)">
            <summary>
            Encodes provided entity to a JSON string.
            </summary>
            <param name="entity">Entity to be encoded.</param>
        </member>
        <member name="M:BlueDBClient.NET.IO.JSON.Decode(System.String)">
            <summary>
            Decodes provided JSON string to an entity. The type of the entity will be determined from the JSON.
            </summary>
            <param name="json">The JSON encoded string.</param>
        </member>
        <member name="M:BlueDBClient.NET.IO.JSON.Decode``1(System.String)">
            <summary>
            Decodes provided JSON string to an entity.
            </summary>
            <typeparam name="T">The type of the entity to decode to.</typeparam>
            <param name="json">A JSON encoded string.</param>
        </member>
        <member name="M:BlueDBClient.NET.IO.JSON.DecodeList``1(System.String)">
            <summary>
            Decodes provided JSON string to a list of entities.
            </summary>
            <typeparam name="T">The type of the entities in the list.</typeparam>
            <param name="json">A JSON encoded string.</param>
            <returns></returns>
        </member>
        <member name="M:BlueDBClient.NET.Utility.EntityUtility.AreEqual(BlueDBClient.NET.Entity.BlueDBEntity,BlueDBClient.NET.Entity.BlueDBEntity)">
            <summary>
            Determines whether both entities are equal. They must be of the same type. This function searches in depth to the end, so it can be slow.
            </summary>
            <param name="entity1">First entity.</param>
            <param name="entity2">Second entity.</param>
        </member>
        <member name="M:BlueDBClient.NET.Utility.ReflectionUtility.SetProperty(System.Object,System.String,System.Object)">
            <summary>
            Sets the specified property to the provided value in the provided object.
            </summary>
            <param name="obj">The object with the property.</param>
            <param name="propertyName">The name of the property to set.</param>
            <param name="value">The value to set the property to.</param>
        </member>
        <member name="M:BlueDBClient.NET.Utility.ReflectionUtility.GetPropertyValue(System.Object,System.String)">
            <summary>
            Gets the value the specified property in the provided object.
            </summary>
            <param name="obj">The object that has the property.</param>
            <param name="propertyName">The name of the property.</param>
        </member>
        <member name="M:BlueDBClient.NET.Utility.ReflectionUtility.GetPropertyType(System.Type,System.String)">
            <summary>
            Gets the type of the specified property in the specified type.
            <para>
            If the type is nullable, this function gets its generic definition.
            </para>
            </summary>
            <param name="type">The type that has the specified property.</param>
            <param name="propertyName">The name of the property.</param>
        </member>
        <member name="M:BlueDBClient.NET.Utility.ReflectionUtility.GetPropertyInfo(System.Object,System.String)">
            <summary>
            Gets the property information by name for the type of the provided object.
            </summary>
            <param name="obj">Object with a type that has the specified property.</param>
            <param name="propertyName">The name of the property.</param>
        </member>
        <member name="M:BlueDBClient.NET.Utility.ReflectionUtility.GetPropertyInfo(System.Type,System.String)">
            <summary>
            Gets the property information by name for the specified type.
            </summary>
            <param name="type">Type that has the specified property.</param>
            <param name="propertyName">The name of the property.</param>
        </member>
        <member name="M:BlueDBClient.NET.Utility.ReflectionUtility.GetGenericFirst(System.Type)">
            <summary>
            Returns the first generic type of the specified type.
            </summary>
            <param name="type">The type from which to get the generic type.</param>
        </member>
        <member name="M:BlueDBClient.NET.Utility.ReflectionUtility.IsSubclassOfRawGeneric(System.Type,System.Type)">
            <summary>
            Determines whether the specified type to check derives from the specified generic type.
            </summary>
            <param name="generic">The parent generic type.</param>
            <param name="toCheck">The type to check if it derives from the specified generic type.</param>
        </member>
        <member name="M:BlueDBClient.NET.Utility.ReflectionUtility.IsGenericList(System.Type)">
            <summary>
            Determines whether the specified type is a generic list.
            </summary>
            <param name="type">The type to determine.</param>
        </member>
    </members>
</doc>
